//root

//Validates all the uuids to make sure there are no dup uuids
//for different entities. Also ensures any Folder entities with the 
//same path have the same uuid
//TODO the logic in this script should be rewritten in groovy and stuck in here
task validate(type: Exec) {
    def validationScript = './buildContentPacks.py'
    executable = validationScript
    args = ['--all', '--validateOnly']
}
task cleanRoot() {
    delete project.file('target')
}

allprojects {
}

subprojects {
    apply plugin: 'base'

    //zip up all the files that make up the pack
    task dist(type: Zip) {
        //println "zipping source/${task.project.name}/"
        from("." ) {
            exclude 'build*'
            exclude 'target'
            exclude '**/.gitkeep'
        }
        archiveName "${project.name}.zip"
    }

    configurations {
        distConfig
        compileSource 
    }

    artifacts {
        distConfig dist
    }
    
    //unzip the project's own pack into zipSource
    //while we could just copy the files the zip has already excluded stuff we don't
    //want to this is easier
    task unzipPack(type: Copy, dependsOn: dist) {
        def zipFile = project.file("build/distributions/${project.name}.zip")
        from zipTree(zipFile)
        into 'target/zipSource'
    }

    //copy this project's pack zip into target
    task copyPack(type: Copy, dependsOn: dist) {
        def zipFile = project.file("build/distributions/${project.name}.zip")
        from zipFile
        into 'target'
    }

    //copy any dependency packs into a dependencies dir
    task copyDeps(type: Copy, dependsOn: dist) {
        from configurations.compileSource
        into project.file('target/zipSource/dependencies')
    }

    //unzip all the dependency pack zips then delete the zips
    task unzipDeps(dependsOn: copyDeps) {
        doLast {
            fileTree(dir: project.file('target/zipSource/dependencies'))
                .include('*.zip')
                .each { depZipFile ->
                    copy {
                        //println "Copying ${depZipFile}"
                        def depName = depZipFile.name - '.zip'
                        from zipTree(depZipFile)
                        into project.file("target/zipSource/dependencies/${depName}")
                    }
                    delete depZipFile
            }
        }
    }

    //zip up this project's source + any dependency source into a fat zip
    task zipAll(type: Zip, dependsOn: [unzipDeps, unzipPack]) {
        destinationDir project.file('target')
        archiveName "${project.name}-all.zip"
        from(project.file('target/zipSource')) 
        //into(project.file('target'))
    }

    //remove the zip file source
    task deleteZipSource(type: Delete, dependsOn: [copyPack, zipAll]) {
        delete project.file('target/zipSource/')
    }

    task CopyZipsToRoot(type: Copy, dependsOn: [deleteZipSource]) {
        from project.file('target')
        into rootProject.file('target')
    }

    //task doAll(dependsOn: [copyDeps, unzipPack, copyPack, unzipDeps, zipAll, deleteZipSource])

    task printDeps() {
        doLast {
            configurations.compileSource.each { dep -> 
                println "compileSource $dep"
            }
        }
    }

    build {
        dependsOn validate
        dependsOn copyDeps
        dependsOn unzipPack
        dependsOn copyPack
        dependsOn unzipDeps
        dependsOn zipAll
        dependsOn deleteZipSource
        dependsOn CopyZipsToRoot
    }

    clean {
        dependsOn cleanRoot
        doFirst {
            delete project.file('target')
        }
    }
}
